#!/bin/bash

################################################################################
#                                                                              #
# A Nagios Plugin that checks if there is any program listening on a specified #
# TCP/UDP port.                                                                #
#                                                                              #
# Copyright (C) 2016 Martin Brehmer <software@mbrehmer.de>                     #
#                                                                              #
# This program is free software; you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation; either version 3, or (at your option)          #
# any later version.                                                           #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program; if not, write to the Free Software Foundation,      #
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.           #
#                                                                              #
################################################################################

VERSION=1.0

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

PROG_NAME=$(basename $0)

print_version()
{
	cat <<EOF
$PROG_NAME $VERSION

Copyright (C) 2016 Martin Brehmer <software@mbrehmer.de>

This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.
EOF
}

print_help()
{
	cat <<EOF
Usage: check_port_listener [-v] [-l <IP_ADDRESS>] -p <PORT_NUMBER>
                           [-P <tcp|udp|any>=tcp]

A Nagios Plugin that checks if there is any program listening on a specified
TCP/UDP port.

Options:
  -h, --help                     print this message
  -l, --listen <IP_ADDRESS>      Specify the listening address
  -p, --port <PORT_NUMBER>       The port number to test
  -P, --protocol <tcp|udp|any>   The upper-layer protocol to test for
  -v, --verbose                  verbose output
  -V, --version                  print version information

Examples:

To check if some daemon is listening on port 80, with TCP protocol:
  $ ./check_port_listener -p 80

To check if the server is able to answer to TCP or UDP DNS requests:
  $ ./check_port_listener -p 53 -P any

Report bugs to <software@mbrehmer.de>
EOF
}

SHORT_OPTS="p:P:l:vVh"
LONG_OPTS="port:,protocol:,listen:,version,verbose,help"

# parameter processing
$(getopt -T >/dev/null 2>&1)
if [[ $? -eq 4 ]]; then
	OPTS=$(getopt -o $SHORT_OPTS -l $LONG_OPTS -n "$PROG_NAME" -- "$@")
else
	case $1 in
		--version)
			print_version
			exit 0
			;;
		--help)
			print_help
			exit 0
			;;
	esac
	OPTS=$(getopt $SHORT_OPTS "$@")
fi

if [[ $? -ne 0 ]]; then
	print_help
	exit 1
fi

eval set -- "$OPTS"

declare -i PORT

# default values
PORT=0
ADDRESS="0.0.0.0"
PROTOCOL="tcp"
VERBOSE=0

while [[ $# -gt 0 ]]; do
	case $1 in
		-V|--version)
			print_version
			exit 0
			;;
		-l|--listen)
			ADDRESS=$2
			shift 2
			;;
		-p|--port)
			PORT=$2
			shift 2
			;;
		-P|--protocol)
			PROTOCOL=$2
			shift 2
			;;
		-v|--verbose)
			VERBOSE=1
			shift
			;;
		-h|--help)
			print_help
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			echo "Internal Error: parameter processing error: $1" >&2
			exit 1
			;;
	esac
done

# port number validation
re="^[0-9]+$"
if [[ ! $PORT =~ $re ]] || [[ $PORT -ge 65535 ]] || [[ $PORT -le 0 ]]; then
	echo "You MUST specify a valid port number with option: '-p|--port <PORT_NUMBER>'" >&2
	exit 1;
fi

# protocol parameter for netstat
NETSTAT_OPTS="-ln"
case $PROTOCOL in
	udp)
		PROTO_CODE=udp
		NETSTAT_OPTS=${NETSTAT_OPTS}u
		;;
	tcp)
		PROTO_CODE=tcp
		NETSTAT_OPTS=${NETSTAT_OPTS}t
		;;
	any)
		PROTO_CODE="(tcp|udp)"
		NETSTAT_OPTS=${NETSTAT_OPTS}tu
		;;
esac

NETSTAT=$(which netstat)
NET_SED='sed -nr -e "s/^([a-zA-Z0-9]+) [0-9 ]+ ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+|[:0-9]+) +.*/\1,\2/p"'
NET_GREP="grep \":$PORT$\" | grep -E \"$PROTO_CODE\""

if [[ $ADDRESS != "0.0.0.0" ]]; then
	NET_GREP="$NET_GREP | grep \"$ADDRESS\""
fi

CMD="$NETSTAT $NETSTAT_OPTS | $NET_SED | $NET_GREP"

if [[ $VERBOSE -eq 1 ]]; then
	echo $CMD
	eval $CMD
else
	eval $CMD 2>&1 >/dev/null
fi

# print test result
if [[ $? -eq 0 ]]; then
	echo "OK - Listening on ${ADDRESS}:${PORT} (protocol: $PROTOCOL)"
	exit $STATE_OK
else
	echo "CRITICAL - No service listening on ${ADDRESS}:${PORT} (protocol: $PROTOCOL)"
	exit $STATE_CRITICAL
fi
